import React, { useState, useEffect } from 'react';
import { ShoppingCart, Search, Home, User, Lightbulb } from 'lucide-react'; // Added Lightbulb icon for recipe ideas
import './App.css'; // Importing CSS for global styles
// Dummy data for food items
const initialFoodItems = [
  {
    id: 1,
    name: 'Classic Burger',
    description: 'Juicy beef patty, fresh lettuce, tomato, onion, and pickles.',
    price: 12.99,
    image: 'https://placehold.co/400x300/FF5733/FFFFFF?text=Burger',
    category: 'Burgers'
  },
  {
    id: 2,
    name: 'Margherita Pizza',
    description: 'Classic tomato sauce, fresh mozzarella, and basil.',
    price: 15.50,
    image: 'https://placehold.co/400x300/33FF57/FFFFFF?text=Pizza',
    category: 'Pizzas'
  },
  {
    id: 3,
    name: 'Caesar Salad',
    description: 'Crisp romaine, croutons, parmesan, and Caesar dressing.',
    price: 9.75,
    image: 'https://placehold.co/400x300/3357FF/FFFFFF?text=Salad',
    category: 'Salads'
  },
  {
    id: 4,
    name: 'Sushi Platter',
    description: 'Assorted fresh sushi and sashimi.',
    price: 24.00,
    image: 'https://placehold.co/400x300/FF33A1/FFFFFF?text=Sushi',
    category: 'Japanese'
  },
  {
    id: 5,
    name: 'Chicken Biryani',
    description: 'Fragrant basmati rice cooked with tender chicken and aromatic spices.',
    price: 18.25,
    image: 'https://placehold.co/400x300/A1FF33/FFFFFF?text=Biryani',
    category: 'Indian'
  },
  {
    id: 6,
    name: 'Vegan Bowl',
    description: 'Quinoa, roasted vegetables, avocado, and a lemon-tahini dressing.',
    price: 14.00,
    image: 'https://placehold.co/400x300/33A1FF/FFFFFF?text=Vegan',
    category: 'Healthy'
  }
];

function App() {
  // State to hold the list of food items (filtered by search)
  const [foodItems, setFoodItems] = useState(initialFoodItems);
  // State to hold items in the shopping cart
  const [cart, setCart] = useState([]);
  // State for the search query
  const [searchQuery, setSearchQuery] = useState('');
  // State to manage modal visibility for cart
  const [isCartModalOpen, setIsCartModalOpen] = useState(false);
  // State for responsive navigation (mobile)
  const [isNavOpen, setIsNavOpen] = useState(false);
  // State for recipe suggestions generated by Gemini
  const [recipeSuggestions, setRecipeSuggestions] = useState('');
  // State for loading indicator during API call
  const [isLoadingRecipes, setIsLoadingRecipes] = useState(false);

  // Effect to filter food items based on search query
  useEffect(() => {
    if (searchQuery === '') {
      setFoodItems(initialFoodItems);
    } else {
      const filtered = initialFoodItems.filter(item =>
        item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        item.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
        item.category.toLowerCase().includes(searchQuery.toLowerCase())
      );
      setFoodItems(filtered);
    }
  }, [searchQuery]);

  // Function to add an item to the cart
  const addToCart = (itemToAdd) => {
    setCart(prevCart => {
      const existingItem = prevCart.find(item => item.id === itemToAdd.id);
      if (existingItem) {
        // If item already in cart, increment quantity
        return prevCart.map(item =>
          item.id === itemToAdd.id ? { ...item, quantity: item.quantity + 1 } : item
        );
      } else {
        // If new item, add with quantity 1
        return [...prevCart, { ...itemToAdd, quantity: 1 }];
      }
    });
  };

  // Function to remove an item from the cart
  const removeFromCart = (itemId) => {
    setCart(prevCart => prevCart.filter(item => item.id !== itemId));
  };

  // Function to update item quantity in cart
  const updateCartQuantity = (itemId, newQuantity) => {
    setCart(prevCart => {
      if (newQuantity <= 0) {
        return prevCart.filter(item => item.id !== itemId); // Remove if quantity is 0 or less
      }
      return prevCart.map(item =>
        item.id === itemId ? { ...item, quantity: newQuantity } : item
      );
    });
  };

  // Calculate total price of items in the cart
  const calculateTotal = () => {
    return cart.reduce((total, item) => total + (item.price * item.quantity), 0).toFixed(2);
  };

  // Function to get recipe suggestions using Gemini API
  const getRecipeSuggestions = async () => {
    if (cart.length === 0) {
      setRecipeSuggestions("Add some items to your cart first to get recipe ideas!");
      return;
    }

    setIsLoadingRecipes(true);
    setRecipeSuggestions(''); // Clear previous suggestions

    const ingredients = cart.map(item => `${item.quantity} ${item.name}`).join(', ');
    const prompt = `Given the following food items in a shopping cart: ${ingredients}. Suggest 3-5 simple and creative recipe ideas that could be made using these ingredients, or suggest what other ingredients might be needed to make a complete meal. Format the response as a list of recipes, with a short description for each.`;

    try {
      let chatHistory = [];
      chatHistory.push({ role: "user", parts: [{ text: prompt }] });
      const payload = { contents: chatHistory };
      const apiKey = ""; // If you want to use models other than gemini-2.0-flash or imagen-3.0-generate-002, provide an API key here. Otherwise, leave this as-is.
      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      const result = await response.json();

      if (result.candidates && result.candidates.length > 0 &&
          result.candidates[0].content && result.candidates[0].content.parts &&
          result.candidates[0].content.parts.length > 0) {
        const text = result.candidates[0].content.parts[0].text;
        setRecipeSuggestions(text);
      } else {
        setRecipeSuggestions("Sorry, I couldn't generate recipe ideas at this moment. Please try again.");
      }
    } catch (error) {
      console.error("Error fetching recipe suggestions:", error);
      setRecipeSuggestions("An error occurred while fetching recipe ideas. Please try again.");
    } finally {
      setIsLoadingRecipes(false);
    }
  };


  return (
    <div className="App">
      {/* Internal CSS styles */}
      <style>
        {`
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

        :root {
          --primary-color: #FF6B6B; /* A vibrant red for accents */
          --secondary-color: #4ECDC4; /* A teal for secondary elements */
          --text-color: #333;
          --light-gray: #f8f8f8;
          --dark-gray: #666;
          --border-color: #ddd;
          --shadow-light: rgba(0, 0, 0, 0.08);
          --shadow-medium: rgba(0, 0, 0, 0.15);
        }

        * {
          box-sizing: border-box;
          margin: 0;
          padding: 0;
        }

        body {
          font-family: 'Inter', sans-serif;
          line-height: 1.6;
          color: var(--text-color);
          background-color: var(--light-gray);
        }

        .App {
          display: flex;
          flex-direction: column;
          min-height: 100vh;
        }

        /* Header Styles */
        .header {
          background-color: #fff;
          padding: 1rem 1.5rem;
          box-shadow: 0 2px 8px var(--shadow-light);
          display: flex;
          justify-content: space-between;
          align-items: center;
          position: sticky;
          top: 0;
          z-index: 1000;
          border-bottom-left-radius: 12px;
          border-bottom-right-radius: 12px;
        }

        .logo {
          font-size: 1.8rem;
          font-weight: 700;
          color: var(--primary-color);
          display: flex;
          align-items: center;
          gap: 0.5rem;
        }

        .logo svg {
            color: var(--secondary-color);
        }

        .nav-toggle {
          display: none; /* Hidden on desktop */
          background: none;
          border: none;
          font-size: 1.8rem;
          cursor: pointer;
          color: var(--text-color);
        }

        .nav-links {
          display: flex;
          gap: 1.5rem;
          align-items: center;
        }

        .nav-links a {
          text-decoration: none;
          color: var(--dark-gray);
          font-weight: 500;
          padding: 0.5rem 0.8rem;
          border-radius: 8px;
          transition: background-color 0.3s ease, color 0.3s ease;
        }

        .nav-links a:hover {
          background-color: var(--primary-color);
          color: #fff;
        }

        .cart-icon-container {
          position: relative;
          cursor: pointer;
          padding: 0.5rem;
          border-radius: 8px;
          transition: background-color 0.3s ease;
        }

        .cart-icon-container:hover {
          background-color: var(--light-gray);
        }

        .cart-count {
          position: absolute;
          top: -8px;
          right: -8px;
          background-color: var(--secondary-color);
          color: #fff;
          font-size: 0.75rem;
          font-weight: 600;
          border-radius: 50%;
          padding: 0.2rem 0.5rem;
          min-width: 20px;
          text-align: center;
        }

        /* Hero Section */
        .hero-section {
          background: linear-gradient(135deg, var(--primary-color), #FFB6B9);
          color: #fff;
          text-align: center;
          padding: 4rem 1.5rem;
          border-bottom-left-radius: 12px;
          border-bottom-right-radius: 12px;
          margin-bottom: 2rem;
          box-shadow: 0 4px 10px var(--shadow-medium);
        }

        .hero-section h1 {
          font-size: 3rem;
          margin-bottom: 1rem;
          font-weight: 700;
        }

        .hero-section p {
          font-size: 1.2rem;
          margin-bottom: 2rem;
          opacity: 0.9;
        }

        .search-bar {
          display: flex;
          justify-content: center;
          margin-top: 2rem;
        }

        .search-bar input {
          width: 100%;
          max-width: 500px;
          padding: 0.8rem 1.2rem;
          border: 1px solid var(--border-color);
          border-radius: 25px;
          font-size: 1rem;
          outline: none;
          box-shadow: 0 2px 5px var(--shadow-light) inset;
        }

        .search-bar input::placeholder {
          color: var(--dark-gray);
        }

        /* Main Content */
        .main-content {
          flex-grow: 1;
          padding: 1.5rem;
          max-width: 1200px;
          margin: 0 auto;
        }

        .food-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
          gap: 1.5rem;
          margin-top: 2rem;
        }

        .food-card {
          background-color: #fff;
          border-radius: 12px;
          overflow: hidden;
          box-shadow: 0 4px 12px var(--shadow-light);
          transition: transform 0.3s ease, box-shadow 0.3s ease;
          display: flex;
          flex-direction: column;
        }

        .food-card:hover {
          transform: translateY(-5px);
          box-shadow: 0 6px 16px var(--shadow-medium);
        }

        .food-card img {
          width: 100%;
          height: 200px;
          object-fit: cover;
          border-bottom: 1px solid var(--border-color);
        }

        .food-card-content {
          padding: 1.2rem;
          flex-grow: 1;
          display: flex;
          flex-direction: column;
          justify-content: space-between;
        }

        .food-card h3 {
          font-size: 1.4rem;
          margin-bottom: 0.5rem;
          color: var(--primary-color);
        }

        .food-card p {
          font-size: 0.95rem;
          color: var(--dark-gray);
          margin-bottom: 1rem;
          flex-grow: 1; /* Allows description to take available space */
        }

        .food-card-footer {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-top: 1rem;
        }

        .food-card .price {
          font-size: 1.3rem;
          font-weight: 600;
          color: var(--secondary-color);
        }

        .add-to-cart-btn {
          background-color: var(--secondary-color);
          color: #fff;
          border: none;
          padding: 0.7rem 1.2rem;
          border-radius: 25px;
          cursor: pointer;
          font-size: 0.95rem;
          font-weight: 600;
          transition: background-color 0.3s ease, transform 0.1s ease;
          display: flex;
          align-items: center;
          gap: 0.5rem;
        }

        .add-to-cart-btn:hover {
          background-color: #3aa8a1; /* Slightly darker teal */
          transform: translateY(-2px);
        }

        .add-to-cart-btn:active {
          transform: translateY(0);
        }

        /* Cart Modal Styles */
        .modal-overlay {
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background-color: rgba(0, 0, 0, 0.6);
          display: flex;
          justify-content: center;
          align-items: center;
          z-index: 2000;
          animation: fadeIn 0.3s ease-out;
        }

        .modal-content {
          background-color: #fff;
          padding: 2rem;
          border-radius: 12px;
          box-shadow: 0 8px 24px var(--shadow-medium);
          max-width: 500px;
          width: 90%;
          max-height: 90vh;
          overflow-y: auto;
          position: relative;
          animation: slideIn 0.3s ease-out;
        }

        .modal-close-btn {
          position: absolute;
          top: 1rem;
          right: 1rem;
          background: none;
          border: none;
          font-size: 1.8rem;
          cursor: pointer;
          color: var(--dark-gray);
        }

        .modal-content h2 {
          font-size: 2rem;
          color: var(--primary-color);
          margin-bottom: 1.5rem;
          text-align: center;
        }

        .cart-items-list {
          list-style: none;
          margin-bottom: 1.5rem;
        }

        .cart-item {
          display: flex;
          align-items: center;
          justify-content: space-between;
          padding: 0.8rem 0;
          border-bottom: 1px dashed var(--border-color);
        }

        .cart-item:last-child {
          border-bottom: none;
        }

        .cart-item-info {
          flex-grow: 1;
        }

        .cart-item-info h4 {
          font-size: 1.1rem;
          margin-bottom: 0.2rem;
        }

        .cart-item-info p {
          font-size: 0.9rem;
          color: var(--dark-gray);
        }

        .cart-item-controls {
          display: flex;
          align-items: center;
          gap: 0.5rem;
        }

        .quantity-btn {
          background-color: var(--light-gray);
          border: 1px solid var(--border-color);
          border-radius: 50%;
          width: 30px;
          height: 30px;
          display: flex;
          justify-content: center;
          align-items: center;
          cursor: pointer;
          font-size: 1.2rem;
          font-weight: 600;
          transition: background-color 0.2s ease;
        }

        .quantity-btn:hover {
          background-color: var(--border-color);
        }

        .quantity-display {
          font-weight: 500;
          min-width: 20px;
          text-align: center;
        }

        .cart-total {
          font-size: 1.5rem;
          font-weight: 700;
          text-align: right;
          margin-top: 1.5rem;
          color: var(--primary-color);
        }

        .checkout-btn {
          width: 100%;
          background-color: var(--primary-color);
          color: #fff;
          border: none;
          padding: 1rem;
          border-radius: 25px;
          font-size: 1.1rem;
          font-weight: 600;
          cursor: pointer;
          margin-top: 1.5rem;
          transition: background-color 0.3s ease, transform 0.1s ease;
        }

        .checkout-btn:hover {
          background-color: #e05e5e; /* Slightly darker red */
          transform: translateY(-2px);
        }

        .checkout-btn:active {
          transform: translateY(0);
        }

        .recipe-button {
            background-color: var(--secondary-color);
            color: #fff;
            border: none;
            padding: 0.8rem 1.2rem;
            border-radius: 25px;
            font-size: 0.95rem;
            font-weight: 600;
            cursor: pointer;
            margin-top: 1rem;
            transition: background-color 0.3s ease, transform 0.1s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            width: 100%;
        }

        .recipe-button:hover {
            background-color: #3aa8a1;
            transform: translateY(-2px);
        }

        .recipe-button:active {
            transform: translateY(0);
        }

        .recipe-suggestions {
            margin-top: 1.5rem;
            padding-top: 1rem;
            border-top: 1px dashed var(--border-color);
        }

        .recipe-suggestions h3 {
            font-size: 1.3rem;
            color: var(--secondary-color);
            margin-bottom: 0.8rem;
            text-align: center;
        }

        .recipe-suggestions pre {
            background-color: var(--light-gray);
            padding: 1rem;
            border-radius: 8px;
            white-space: pre-wrap; /* Ensures text wraps */
            font-size: 0.9rem;
            line-height: 1.5;
            color: var(--text-color);
            max-height: 200px;
            overflow-y: auto;
            border: 1px solid var(--border-color);
        }

        .loading-spinner {
            border: 4px solid #f3f3f3; /* Light grey */
            border-top: 4px solid var(--secondary-color); /* Blue */
            border-radius: 50%;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }


        /* Footer Styles */
        .footer {
          background-color: var(--text-color);
          color: #fff;
          text-align: center;
          padding: 1.5rem;
          margin-top: 2rem;
          border-top-left-radius: 12px;
          border-top-right-radius: 12px;
        }

        .footer p {
          font-size: 0.9rem;
          opacity: 0.8;
        }

        /* Animations */
        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }

        @keyframes slideIn {
          from { transform: translateY(-50px); opacity: 0; }
          to { transform: translateY(0); opacity: 1; }
        }

        /* Responsive Design */
        @media (max-width: 768px) {
          .header {
            padding: 1rem;
          }

          .nav-toggle {
            display: block; /* Show hamburger menu on mobile */
          }

          .nav-links {
            display: ${isNavOpen ? 'flex' : 'none'}; /* Toggle visibility */
            flex-direction: column;
            position: absolute;
            top: 60px; /* Adjust based on header height */
            left: 0;
            width: 100%;
            background-color: #fff;
            box-shadow: 0 4px 8px var(--shadow-light);
            padding: 1rem 0;
            border-bottom-left-radius: 12px;
            border-bottom-right-radius: 12px;
          }

          .nav-links a {
            padding: 0.8rem 1.5rem;
            width: 100%;
            text-align: center;
          }

          .hero-section {
            padding: 3rem 1rem;
          }

          .hero-section h1 {
            font-size: 2.2rem;
          }

          .hero-section p {
            font-size: 1rem;
          }

          .food-grid {
            grid-template-columns: 1fr; /* Single column on small screens */
            gap: 1rem;
          }

          .food-card-content {
            padding: 1rem;
          }

          .food-card h3 {
            font-size: 1.2rem;
          }

          .food-card p {
            font-size: 0.85rem;
          }

          .food-card .price {
            font-size: 1.1rem;
          }

          .add-to-cart-btn {
            padding: 0.6rem 1rem;
            font-size: 0.85rem;
          }

          .modal-content {
            padding: 1.5rem;
            width: 95%;
          }

          .modal-content h2 {
            font-size: 1.5rem;
            margin-bottom: 1rem;
          }

          .cart-item-info h4 {
            font-size: 1rem;
          }

          .cart-item-info p {
            font-size: 0.8rem;
          }

          .cart-total {
            font-size: 1.3rem;
          }

          .checkout-btn {
            padding: 0.8rem;
            font-size: 1rem;
          }
        }

        @media (max-width: 480px) {
            .logo {
                font-size: 1.5rem;
            }
            .cart-icon-container {
                padding: 0.3rem;
            }
            .cart-count {
                font-size: 0.7rem;
                top: -5px;
                right: -5px;
            }
            .search-bar input {
                padding: 0.7rem 1rem;
                font-size: 0.9rem;
            }
        }
        `}
      </style>

      {/* Header Section */}
      <header className="header">
        <div className="logo">
          <Home size={28} />
          FoodDelivery
        </div>
        <button className="nav-toggle" onClick={() => setIsNavOpen(!isNavOpen)}>
          ☰
        </button>
        <nav className="nav-links">
          <a href="#home" onClick={() => setIsNavOpen(false)}>Home</a>
          <a href="#menu" onClick={() => setIsNavOpen(false)}>Menu</a>
          <a href="#offers" onClick={() => setIsNavOpen(false)}>Offers</a>
          <a href="#contact" onClick={() => setIsNavOpen(false)}>Contact</a>
          <div className="cart-icon-container" onClick={() => setIsCartModalOpen(true)}>
            <ShoppingCart size={24} />
            {cart.length > 0 && <span className="cart-count">{cart.reduce((sum, item) => sum + item.quantity, 0)}</span>}
          </div>
          <a href="#profile" onClick={() => setIsNavOpen(false)}><User size={24} /></a>
        </nav>
      </header>

      {/* Hero Section */}
      <section className="hero-section">
        <h1>Delicious Food, Delivered Fast!</h1>
        <p>Order your favorite meals from local restaurants directly to your door.</p>
        <div className="search-bar">
          <input
            type="text"
            placeholder="Search for dishes or restaurants..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>
      </section>

      {/* Main Content - Food Grid */}
      <main className="main-content">
        <h2>Explore Our Menu</h2>
        <div className="food-grid">
          {foodItems.length > 0 ? (
            foodItems.map(item => (
              <div key={item.id} className="food-card">
                <img src={item.image} alt={item.name} onError={(e) => { e.target.onerror = null; e.target.src = `https://placehold.co/400x300/CCCCCC/333333?text=${item.name.replace(/\s/g, '+')}`; }} />
                <div className="food-card-content">
                  <h3>{item.name}</h3>
                  <p>{item.description}</p>
                  <div className="food-card-footer">
                    <span className="price">${item.price.toFixed(2)}</span>
                    <button className="add-to-cart-btn" onClick={() => addToCart(item)}>
                      <ShoppingCart size={18} /> Add to Cart
                    </button>
                  </div>
                </div>
              </div>
            ))
          ) : (
            <p style={{ textAlign: 'center', gridColumn: '1 / -1', fontSize: '1.2rem', color: 'var(--dark-gray)' }}>
              No items found matching your search. Try a different query!
            </p>
          )}
        </div>
      </main>

      {/* Cart Modal */}
      {isCartModalOpen && (
        <div className="modal-overlay" onClick={() => setIsCartModalOpen(false)}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}> {/* Prevent closing when clicking inside */}
            <button className="modal-close-btn" onClick={() => setIsCartModalOpen(false)}>
              &times;
            </button>
            <h2>Your Cart</h2>
            {cart.length === 0 ? (
              <p style={{ textAlign: 'center', color: 'var(--dark-gray)' }}>Your cart is empty.</p>
            ) : (
              <>
                <ul className="cart-items-list">
                  {cart.map(item => (
                    <li key={item.id} className="cart-item">
                      <div className="cart-item-info">
                        <h4>{item.name}</h4>
                        <p>${item.price.toFixed(2)}</p>
                      </div>
                      <div className="cart-item-controls">
                        <button className="quantity-btn" onClick={() => updateCartQuantity(item.id, item.quantity - 1)}>-</button>
                        <span className="quantity-display">{item.quantity}</span>
                        <button className="quantity-btn" onClick={() => updateCartQuantity(item.id, item.quantity + 1)}>+</button>
                      </div>
                    </li>
                  ))}
                </ul>
                <div className="cart-total">
                  Total: ${calculateTotal()}
                </div>
                <button className="recipe-button" onClick={getRecipeSuggestions} disabled={isLoadingRecipes}>
                  {isLoadingRecipes ? <div className="loading-spinner"></div> : <><Lightbulb size={18} /> ✨ Get Recipe Ideas</>}
                </button>
                {recipeSuggestions && (
                  <div className="recipe-suggestions">
                    <h3>Recipe Ideas for You:</h3>
                    <pre>{recipeSuggestions}</pre>
                  </div>
                )}
                <button className="checkout-btn" onClick={() => alert('Proceeding to checkout! (This is a demo)')}>
                  Proceed to Checkout
                </button>
              </>
            )}
          </div>
        </div>
      )}

      {/* Footer Section */}
      <footer className="footer">
        <p>&copy; {new Date().getFullYear()} FoodDelivery. All rights reserved.</p>
      </footer>
    </div>
  );
}

export default App;
